{"version":3,"sources":["core/util.js","components/Ship.js","components/ShipSelector.js","core/GameSettings.js","components/Board.js","core/Button.js","components/EnemyBoard.js","components/SetupBoard.js","components/PlayerBoard.js","core/ButtonGroup.js","components/Header.js","components/GameFinished.js","core/useDidUpdateEffect.js","App.js","serviceWorker.js","index.js"],"names":["uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getDimensions","template","rows","length","cols","getRandomBool","Math","random","getRandomInt","min","max","ceil","floor","hullSize","flat","reduce","previous","current","ShipContent","React","memo","ship","setDraggedShip","cellSize","gap","isSunken","isSmall","containerWidth","containerHeight","handleGrabbingShip","useCallback","x","y","cn","classNames","className","onMouseDown","e","viewBox","xmlns","map","row","cell","key","fill","stroke","width","height","stopPropagation","Ship","props","rotateTemplate90deg","rotatedTemplate","Array","ShipWithTooltip","templates","draggedShip","w","useState","show","setShow","onSetDraggedShip","onMouseLeave","onMouseEnter","style","shipTemplate","i","ShipGroup","allowed","children","sCN","ShipSelector","allowedCounts","useContext","GameSettingsContext","settings","shipConfig","group","allwdIdx","index","templateName","t","getAllRotations","mutations","rotations","push","ship1Rotated","ship2Rotated","ship3StraightRotated","ship3LRotated","ship4BlockRotated","ship4StraightRotated","GAME_MODES","simple","name","advanced","concat","createContext","rowNames","BoardShip","handleMouseDown","uuid","ys","xs","strokeWidth","getStrokeColor","inBounds","isOverlapping","getTransform","colStep","rowStep","LetterRow","letters","handleMouseEnter","letter","transform","textLength","fontSize","NumberRow","numbers","num","BlankPlaceholders","handleClick","onClick","Board","placedShips","draggingPosition","handleCellMouseEnter","handlePlacedShipDragging","gameSettings","colNames","isDragging","position","zIndex","left","top","pointerEvents","offset","cursor","isSnapping","BlankBoard","onCellClick","Button","isDisabled","outlined","isActive","cns","svgCoord","ct","PlacedShots","placedShots","shotSource","cx","cy","r","addHit","target","hits","filteredHits","filter","hx","hy","ShipHits","sx","sy","d","HullToD","hull","ShipHull","shipHull","yt","xt","x0","y0","x1","y1","BombedShips","ships","alreadyPlaced","shots","s","getComputerShots","placedAutoShots","neighborDiff","templatePoints","shipTemplatePoints","autoShots","xd","ny","nx","TargetsRow","size","sort","reverse","Targets","gameState","objectArray","property","TargetShips","acc","obj","Object","entries","EnemyBoard","usePlacedShots","useEnemyShips","title","gameCanStart","onStartClick","useAutoShots","onMissedShot","showShips","setPlacedShots","placedComputerShots","setPlacedComputerShots","enemyShips","setEnemyShips","newPlaced","board","placedShipsToBoard","sh","targetShip","placeShipOnBoard","j","yd","calculateOffset","centerOffset","getAllValidPositions","positions","getRandomShipPlacement","allTemplates","arr","f","chosenTemplates","validPositions","shipCountsOnBoard","validShipCount","placedShip","SetupBoard","usePlacedShips","setPlacedShips","setDraggingPosition","hoveredCell","setHoveredCell","handleDraggedShip","shipUUID","handleDraggedShipSnapping","newDragged","handleOnMouseUp","lastValidPosition","handleDraggingOnPlacedShip","fillBoardWithRandom","handleOnMouseMove","buttons","clientX","clientY","useEffect","document","addEventListener","removeEventListener","handleOnMouseDown","PlayerBoard","useTakenShots","useTakenAutoShots","takenShots","takenAutoShots","ButtonGroup","Header","setGameSettings","role","aria-label","GameFinished","computerShips","isPlayerTurn","restartGame","every","useDidUpdateEffect","func","deps","didMount","useRef","placeShot","getRandomArrayItem","App","setGameState","setIsPlayerTurn","playerPlacedShips","setPlayerPlacedShips","playerPlacedShots","setPlayerPlacedShots","playerPlacedAutoShots","setPlayerPlacedAutoShots","computerPlacedShips","setComputerPlacedShips","computerPlacedShots","setComputerPlacedShots","computerPlacedAutoShots","setComputerPlacedAutoShots","isOddTargetsFirst","setIsOddTargetsFirst","resetGame","timer","setTimeout","woundedShip","modeName","shotsCombined","pHits","diffs","mode","getDiffArray","chooseTarget","allShotsOnBoard","hit","undefined","oddXPositions","evenXPositions","oddOptions","evenOptions","getRandomValidTarget","clearTimeout","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.150deae8.chunk.js","sourcesContent":["export function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        // eslint-disable-next-line no-mixed-operators\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\n\nexport function getDimensions(template) {\n    return {\n        rows: template.length,\n        cols: template[0].length\n    };\n}\n\nexport function getRandomBool() {\n    return Math.random() >= 0.5;\n}\n\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const hullSize = (template) => {\n    return template.flat(2).reduce((previous, current) => current += previous);\n}\n\nexport function groupBy(objectArray, property) {\n    return objectArray.reduce(function (acc, obj) {\n        let key = obj[property];\n        if (!acc[key]) {\n            acc[key] = [];\n        }\n        acc[key].push(obj);\n        return acc;\n    }, {});\n}\n","import React, {useCallback} from \"react\";\nimport {getDimensions} from \"../core/util\";\nimport classNames from \"classnames\"\n\nconst ShipContent = React.memo(({ship, setDraggedShip, cellSize = 10, gap = 1, isSunken, isSmall}) => {\n    const {rows, cols} = getDimensions(ship);\n\n    const containerWidth = cellSize * cols + cols - 1;\n    const containerHeight = cellSize * rows + rows - 1;\n\n    const handleGrabbingShip = useCallback((x, y) => {\n        setDraggedShip(ship, x, y)\n    }, [setDraggedShip, ship]);\n\n    const cn = classNames(`ship ship--${cols}`, {\"ship--small\": isSmall}, {\"ship--sunken\": isSunken})\n\n    return (\n        <div className={cn}\n             onMouseDown={e => {\n                 handleGrabbingShip(-1, -1)\n             }}>\n            <svg viewBox={`0 0 ${containerWidth} ${containerHeight}`} xmlns=\"http://www.w3.org/2000/svg\">\n                {ship.map((row, y) => row.map((cell, x) => {\n                    if (cell) {\n                        return (\n                            <rect\n                                key={`${x}:${y}`}\n                                fill=\"white\"\n                                stroke=\"transparent\"\n                                x={(x) * cellSize + ((x) * gap)}\n                                y={(y) * cellSize + ((y) * gap)}\n                                width={cellSize}\n                                height={cellSize}\n                                onMouseDown={(e) => {\n                                    handleGrabbingShip(x, y);\n                                    e.stopPropagation();\n                                }}\n                            />\n                        )\n                    } else {\n                        return null;\n                    }\n                }))}\n            </svg>\n        </div>\n    )\n});\n\nexport const Ship = React.memo((props) => {\n    if (props.ship === null) {\n        return null;\n    } else {\n        return <ShipContent {...props}/>\n    }\n\n})\n","import React, {useCallback, useContext, useState} from \"react\";\nimport {Ship} from \"./Ship\";\nimport {getDimensions} from \"../core/util\";\nimport classNames from \"classnames\"\nimport {GameSettingsContext} from \"../core/GameSettings\";\n\nexport const rotateTemplate90deg = (template) => {\n    const {rows, cols} = getDimensions(template);\n\n    let rotatedTemplate = new Array(cols).fill().map(() => new Array(rows).fill(0));\n\n    for (let y = 0; y < rows; y++) {\n        for (let x = 0; x < cols; x++) {\n            rotatedTemplate[(cols - x - 1)][y] = template[y][x];\n        }\n    }\n\n    return rotatedTemplate;\n};\n\nconst ShipWithTooltip = React.memo(({templates, setDraggedShip, draggedShip, w}) => {\n    const [show, setShow] = useState(false)\n\n    const onSetDraggedShip = useCallback((ship, x, y) => {\n        setDraggedShip(ship, x, y);\n        setShow(false);\n    }, [setShow, setDraggedShip])\n\n    return (\n        <div className=\"ship-with-tooltip\"\n             onMouseLeave={() => setShow(false)}>\n            <div onMouseEnter={() => setShow(true)}>\n                <Ship ship={templates[0]}\n                      setDraggedShip={onSetDraggedShip}/>\n            </div>\n            {\n                templates.length > 1 &&\n                draggedShip === null &&\n                show &&\n                <div className=\"ship-with-tooltip__box\"\n                     style={{width: w}}>\n                    {templates.map((shipTemplate, i) => <Ship ship={shipTemplate}\n                                                              key={`key-${i}`}\n                                                              setDraggedShip={onSetDraggedShip}/>)}\n                </div>\n            }\n        </div>\n    )\n})\n\nconst ShipGroup = React.memo(({allowed, children}) => {\n    const sCN = classNames(\"ship-group\", {\"ship-group--disabled\": allowed <= 0})\n\n    return (\n        <div className={sCN}>\n            <div className=\"ship-group__label\">\n                {allowed}×\n            </div>\n            {children}\n        </div>\n    )\n})\n\nexport const ShipSelector = React.memo(({draggedShip, setDraggedShip, allowedCounts}) => {\n\n        const [settings] = useContext(GameSettingsContext)\n\n        return (\n            <div className=\"ship-selector\">\n                {settings.shipConfig.map((group, allwdIdx) => {\n                    return (\n                        <ShipGroup\n                            key={`group-${allwdIdx}`}\n                            allowed={allowedCounts[allwdIdx]}>\n                            {group.map((template, index) => {\n                                return (\n                                    <ShipWithTooltip key={`ship-${allwdIdx}-${index}`}\n                                                     draggedShip={draggedShip}\n                                                     setDraggedShip={setDraggedShip}\n                                                     w={template.w}\n                                                     templateName={`ship-${allwdIdx}-${index}`}\n                                                     templates={template.t}/>\n                                )\n                            })}\n                        </ShipGroup>\n                    )\n                })}\n            </div>\n        )\n\n    }\n)\n","import React from \"react\";\nimport {rotateTemplate90deg} from \"../components/ShipSelector\";\n\nexport const getAllRotations = ({template, mutations}) => {\n    let rotations = [template]\n    for (let i = 0; i < mutations; i++) {\n        rotations.push(rotateTemplate90deg(rotations[i]))\n    }\n    return rotations\n}\n\nconst ship1 = {\n    mutations: 0,\n    template: [[1]]\n}\n\nconst ship2 = {\n    mutations: 1,\n    template: [[1, 1]]\n}\n\nconst ship3Straight = {\n    mutations: 1,\n    template: [\n        [1, 1, 1]\n    ]\n};\n\nconst ship3L = {\n    mutations: 3,\n    template: [\n        [1, 1],\n        [1, 0]\n    ]\n};\n\nconst ship4Block = {\n    mutations: 0,\n    template: [\n        [1, 1],\n        [1, 1],\n    ]\n};\n\nconst ship4Straight = {\n    mutations: 1,\n    template: [[1, 1, 1, 1]]\n}\n\nconst ship4L = {\n    mutations: 3,\n    template: [\n        [1, 1, 1],\n        [1, 0, 0]\n    ]\n}\n\nconst ship4LFlipped = {\n    mutations: 3,\n    template: [\n        [1, 0, 0],\n        [1, 1, 1]\n    ]\n}\n\nconst ship4T = {\n    mutations: 3,\n    template: [\n        [0, 1, 0],\n        [1, 1, 1]\n    ]\n}\n\nconst ship4Z = {\n    mutations: 1,\n    template: [\n        [1, 1, 0],\n        [0, 1, 1]\n    ]\n}\n\nconst ship4ZFlipped = {\n    mutations: 1,\n    template: [\n        [0, 1, 1],\n        [1, 1, 0]\n    ]\n}\n\nconst ship1Rotated = getAllRotations(ship1);\n\nconst ship2Rotated = getAllRotations(ship2);\n\nconst ship3StraightRotated = getAllRotations(ship3Straight);\nconst ship3LRotated = getAllRotations(ship3L);\n\nconst ship4BlockRotated = getAllRotations(ship4Block);\nconst ship4StraightRotated = getAllRotations(ship4Straight);\nconst ship4LRotated = getAllRotations(ship4L).concat(getAllRotations(ship4LFlipped));\nconst ship4TRotated = getAllRotations(ship4T);\nconst ship4ZRotated = getAllRotations(ship4Z).concat(getAllRotations(ship4ZFlipped));\n\nconst advancedShipConfig = [\n    [{\n        t: ship1Rotated,\n        w: null\n    }],\n    [{\n        t: ship2Rotated,\n        w: 170\n    }],\n\n    [{\n        t: ship3StraightRotated,\n        w: 210\n    }, {\n        t: ship3LRotated,\n        w: 385\n    }],\n    [{\n        t: ship4StraightRotated,\n        w: 245\n    }, {\n        t: ship4BlockRotated,\n        w: null\n    }, {\n        t: ship4LRotated,\n        w: 459\n    }, {\n        t: ship4TRotated,\n        w: 459\n    }, {\n        t: ship4ZRotated,\n        w: 459\n    }]\n]\n\n\nconst simpleShipConfig = [\n    [{\n        t: ship1Rotated,\n        w: null\n    }],\n    [{\n        t: ship2Rotated,\n        w: 170\n    }],\n\n    [{\n        t: ship3StraightRotated,\n        w: 210\n    }],\n    [{\n        t: ship4StraightRotated,\n        w: 245\n    }]\n]\n\nexport const GAME_MODES = {\n    simple: {\n        name: \"simple\",\n        cols: \"ABCDEFGHIJ\",\n        shipConfig: simpleShipConfig\n    },\n    advanced: {\n        name: \"advanced\",\n        cols: \"KARTUPELIS\",\n        shipConfig: advancedShipConfig\n    }\n}\nexport const GameSettingsContext = React.createContext(\n    GAME_MODES.advanced\n)\n","import React, {useContext} from \"react\";\nimport {Ship} from \"./Ship\";\nimport {GameSettingsContext} from \"../core/GameSettings\";\n\nexport const cellSize = 10;\nexport const gap = 1;\nconst boardCols = 11; // 10 cols + 1 for number\nconst boardRows = 11; // 10 rows + 1 for letter\n\nconst rowNames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nconst containerWidth = cellSize * boardCols + boardCols;\nconst containerHeight = cellSize * boardRows + boardRows;\n\nexport const BoardShip = React.memo(({x, y, template, cellSize = 10, gap = 1, handleMouseDown, uuid}) => {\n    return (\n        <g\n            className=\"board-ship\"\n            onMouseDown={() => handleMouseDown(-1, -1)}>\n            {template.map((row, ys) => row.map((cell, xs) => {\n                if (cell) {\n                    return (\n                        <rect\n                            key={`${uuid}-${ys}-${xs}`}\n                            onMouseDown={e => {\n                                handleMouseDown(xs, ys);\n                                e.stopPropagation()\n                            }}\n                            strokeWidth=\"2\"\n                            stroke=\"transparent\"\n                            x={(x + xs + 1) * cellSize + ((x + xs + 1) * gap)}\n                            y={(y + ys + 1) * cellSize + ((y + ys + 1) * gap)}\n                            width={cellSize}\n                            height={cellSize}\n                        />\n                    )\n                } else {\n                    return null;\n                }\n            }))}\n\n        </g>\n    )\n})\n\nconst getStrokeColor = (draggedShip) => {\n    if (!draggedShip.inBounds) {\n        return \"#ffd868\";\n    } else if (draggedShip.isOverlapping) {\n        return \"#b80d57\"\n    }\n    return \"white\";\n};\n\nconst getTransform = (template, x, y) => {\n    const rows = template.length;\n    const cols = template[0].length;\n\n    const colStep = 100 / cols;\n    const rowStep = 100 / rows;\n\n    return `translate(-${colStep / 2 + colStep * x}%, -${rowStep / 2 + rowStep * y}%)`\n};\n\nconst LetterRow = React.memo(({letters, handleMouseEnter}) => {\n    return (\n        <g className=\"letter-row\">\n            {letters.map((letter, index) => {\n                return (\n                    <g key={letter}>\n                        <rect stroke=\"var(--body-background)\"\n                              strokeWidth=\"2\"\n                              fill=\"var(--body-background)\"\n                              x={(index + 1) * cellSize + ((index + 1) * gap)}\n                              y=\"0\"\n                              width={cellSize}\n                              height={cellSize}\n                              onMouseEnter={handleMouseEnter}\n                        />\n                        <text\n                            x={(index + 1) * cellSize + (index * gap)}\n                            y={cellSize}\n                            transform=\"translate(3,-2)\"\n                            textLength={cellSize}\n                            fill=\"white\"\n                            style={{fontSize: \"9\"}}\n                        >\n                            {letter}\n                        </text>\n                    </g>\n                )\n            })}\n\n        </g>)\n});\n\nconst NumberRow = React.memo(({numbers, handleMouseEnter}) => {\n    return (\n        <g className=\"number-col\">\n            {numbers.map((num, index) => {\n                return (\n                    <g key={num}>\n                        <rect stroke=\"var(--body-background)\"\n                              strokeWidth=\"2\"\n                              fill=\"var(--body-background)\"\n                              x=\"0\"\n                              y={(index + 1) * cellSize + ((index + 1) * gap)}\n                              width={cellSize}\n                              height={cellSize}\n                              onMouseEnter={handleMouseEnter}\n                        />\n                        <text x=\"0\"\n                              y={(index + 2) * cellSize + (index * gap)}\n                              textLength={cellSize}\n                              fill=\"white\"\n                              transform={`translate(${num === 10 ? 0 : 4},-1)`}\n                              onMouseEnter={handleMouseEnter}\n                              style={{fontSize: \"9\"}}>\n                            {num}\n                        </text>\n                    </g>\n                )\n            })}\n        </g>\n    )\n});\n\nconst BlankPlaceholders = React.memo(({cols, rows, handleMouseEnter, className, handleClick = () => null}) => {\n    return (\n        <g className=\"blank-placeholders\">\n            {cols.map((letter, x) => {\n                return rows.map((num, y) => {\n                    return (\n                        <rect key={`${letter}:${num}`}\n                              className={className}\n                              stroke=\"transparent\"\n                              fill=\"#109DAC\"\n                              x={(x + 1) * cellSize + ((x + 1) * gap)}\n                              y={(y + 1) * cellSize + ((y + 1) * gap)}\n                              width={cellSize}\n                              height={cellSize}\n                              onClick={() => handleClick({x, y})}\n                              onMouseEnter={() => handleMouseEnter({x, y})}\n                        />\n                    )\n                })\n            })}\n        </g>\n    )\n})\n\nexport function Board({placedShips, draggingPosition, handleCellMouseEnter, draggedShip, handlePlacedShipDragging}) {\n    const [gameSettings] = useContext(GameSettingsContext)\n    const colNames = [...gameSettings.cols];\n\n    return (\n        <div className=\"board\">\n            {draggedShip && draggedShip.isDragging &&\n            <div style={{\n                position: \"fixed\",\n                zIndex: \"2\",\n                left: draggingPosition.x,\n                top: draggingPosition.y,\n                pointerEvents: \"none\",\n                transform: getTransform(draggedShip.template, draggedShip.offset.x, draggedShip.offset.y)\n            }}>\n                <Ship ship={draggedShip.template}/>\n            </div>}\n\n            <svg viewBox={`0 0 ${containerWidth} ${containerHeight}`}\n                 onMouseLeave={() => handleCellMouseEnter({x: -1, y: -1})}\n                 xmlns=\"http://www.w3.org/2000/svg\">\n\n\n                <BlankPlaceholders cols={colNames}\n                                   rows={rowNames}\n                                   handleMouseEnter={handleCellMouseEnter}/>\n\n                <g style={draggedShip ? {\n                    pointerEvents: \"none\",\n                    fill: \"white\",\n                } : {\n                    cursor: \"pointer\",\n                    fill: \"white\",\n                }}>\n                    {\n                        placedShips.map(ship => <BoardShip template={ship.template}\n                                                           uuid={ship.uuid}\n                                                           key={ship.uuid}\n                                                           handleMouseDown={(x, y) => {\n                                                               handleCellMouseEnter({x: ship.x + x, y: ship.y + y})\n                                                               handlePlacedShipDragging(ship, x, y)\n                                                           }}\n                                                           x={ship.x}\n                                                           y={ship.y}/>)\n                    }\n                </g>\n\n                {draggedShip && draggedShip.isSnapping &&\n                <g style={{\n                    pointerEvents: \"none\",\n                    fill: getStrokeColor(draggedShip),\n                }}>\n                    <BoardShip template={draggedShip.template}\n                               uuid={draggedShip.uuid}\n                               x={draggedShip.x}\n                               y={draggedShip.y}/>\n                </g>}\n                <LetterRow letters={colNames}\n                           handleMouseEnter={() => handleCellMouseEnter({x: -1, y: -1})}/>\n\n                <NumberRow numbers={rowNames}\n                           handleMouseEnter={() => handleCellMouseEnter({x: -1, y: -1})}/>\n            </svg>\n        </div>\n    )\n}\n\nexport function BlankBoard({\n                               onCellClick,\n                               handleCellMouseEnter,\n                               children\n                           }) {\n    const [gameSettings] = useContext(GameSettingsContext)\n    const colNames = [...gameSettings.cols];\n\n    return (\n        <div className=\"board\">\n            <svg viewBox={`0 0 ${containerWidth} ${containerHeight}`}\n                 onMouseLeave={() => handleCellMouseEnter({x: -1, y: -1})}\n                 xmlns=\"http://www.w3.org/2000/svg\">\n\n                <BlankPlaceholders cols={colNames}\n                                   rows={rowNames}\n                                   className=\"board-hover\"\n                                   handleClick={onCellClick}\n                                   handleMouseEnter={handleCellMouseEnter}/>\n\n                <LetterRow letters={colNames}\n                           handleMouseEnter={() => handleCellMouseEnter({x: -1, y: -1})}/>\n\n                <NumberRow numbers={rowNames}\n                           handleMouseEnter={() => handleCellMouseEnter({x: -1, y: -1})}/>\n                {children}\n            </svg>\n        </div>\n    )\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Button({onClick, isDisabled, children, cn, outlined, isActive}) {\n    const cns = classNames(\"button\", {\"button--disabled\": isDisabled}, {\"button--outlined\": outlined}, {\"button--active\": isActive}, cn)\n\n    return (\n        <button className={cns}\n                onClick={onClick}>\n            {children}\n        </button>\n    )\n}\n","import React from \"react\";\nimport {BlankBoard, BoardShip, cellSize, gap} from \"./Board\";\nimport {getDimensions, groupBy, hullSize} from \"../core/util\";\nimport {placedShipsToBoard} from \"./SetupBoard\";\nimport hull from \"hull.js\"\nimport Button from \"../core/Button\";\nimport classNames from \"classnames\";\nimport {Ship} from \"./Ship\";\n\nfunction svgCoord(c, ct) {\n    return (c + ct + 1) * cellSize + ((c + ct + 1) * gap)\n}\n\nexport function PlacedShots({placedShots, shotSource}) {\n    if (placedShots) {\n        return (\n            <g className={`placed-shots placed-shots--${shotSource}`}>\n                {placedShots.map(([x, y]) => {\n                    return (\n                        <g className=\"placed-shots__group\" key={`${x}-${y}`}>\n                            <rect className=\"placed-shots__mask\"\n                                  stroke=\"transparent\"\n                                  fill=\"transparent\"\n                                  x={svgCoord(x, 0)}\n                                  y={svgCoord(y, 0)}\n                                  width={cellSize}\n                                  height={cellSize}\n                            />\n                            <circle\n                                className=\"placed-shots__shot\"\n                                cx={svgCoord(x, 0) + cellSize / 2}\n                                cy={svgCoord(y, 0) + cellSize / 2}\n                                r=\"1.5\"/>\n                        </g>\n                    )\n                })}\n            </g>\n        )\n\n    } else {\n        return null;\n    }\n}\n\nexport const addHit = (target, x, y) => {\n    if (target?.hits) {\n        const filteredHits = target.hits.filter(([hx, hy]) => !(hx === x && hy === y));\n        return {\n            ...target,\n            hits: [...filteredHits, [x, y]]\n        }\n    } else {\n        return {\n            ...target,\n            hits: [[x, y]]\n        }\n    }\n\n};\n\nexport const isSunken = ({template, hits}) => {\n    const size = template.flat(5).reduce((previous, current) => current += previous);\n    return size === hits.length\n};\n\n\nfunction ShipHits({hits}) {\n    return hits.map(([x, y]) => {\n        let sx = svgCoord(x, 0);\n        let sy = svgCoord(y, 0);\n        return (\n            <g className=\"bombed-cell__wrapper\"\n               key={`${x}-${y}`}>\n                <rect className=\"bombed-ship__cell\"\n                      x={sx}\n                      y={sy}\n                      width={cellSize}\n                      height={cellSize}\n                />\n                <path\n                    d={`M ${sx + 0.5} ${sy + 0.5} \n                        L ${sx + cellSize - .5} ${sy + cellSize - .5}\n                        M ${sx + 0.5} ${sy + cellSize - .5}\n                        L ${sx + cellSize - .5} ${sy + 0.5}`}\n                    strokeWidth=\"1\"\n                    stroke=\"var(--button-primary-bgcolor)\"/>\n            </g>\n        )\n    })\n}\n\nfunction HullToD(hull) {\n    let d = `M ${hull[0][0]} ${hull[0][1]}`;\n\n    for (let i = 1; i < hull.length; i++) {\n        d += ` ${hull[i][0]} ${hull[i][1]}`;\n    }\n\n    return d;\n}\n\nfunction ShipHull({ship}) {\n    let shipHull = [];\n    const {template, x, y} = ship;\n    const {rows, cols} = getDimensions(template);\n\n    for (let yt = 0; yt < rows; yt++) {\n        for (let xt = 0; xt < cols; xt++) {\n            if (template[yt][xt]) {\n                const x0 = svgCoord(x, xt) + 0.5;\n                const y0 = svgCoord(y, yt) + 0.5;\n\n                const x1 = x0 + cellSize - .5;\n                const y1 = y0 + cellSize - .5;\n\n                shipHull.push([x0, y0], [x0, y1], [x1, y0], [x1, y1])\n            }\n        }\n    }\n\n    return (\n        <path\n            fill=\"transparent\"\n            stroke=\"var(--button-primary-bgcolor)\"\n            strokeWidth=\"1\"\n            d={HullToD(hull(shipHull, 1))}\n        />\n    );\n}\n\nexport function BombedShips({ships}) {\n    return ships.map((ship) => {\n        const {isSunken, hits, uuid} = ship;\n\n        return (\n            <g key={uuid}\n               className={`bombed-ship bombed-ship--${isSunken}`}>\n                <ShipHits hits={hits}/>\n                {isSunken &&\n                <ShipHull ship={ship}/>}\n            </g>\n        )\n    })\n}\n\nexport function alreadyPlaced(x, y, shots) {\n    for (let i = 0, s = shots.length; i < s; i++) {\n        if (shots[i][0] === x && shots[i][1] === y) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction shipTemplatePoints({x, y, template}) {\n    const {rows, cols} = getDimensions(template);\n    let templatePoints = [];\n\n    for (let yt = 0; yt < rows; yt++) {\n        for (let xt = 0; xt < cols; xt++) {\n            if (template[yt][xt]) {\n                templatePoints.push([x + xt, y + yt])\n            }\n        }\n    }\n    return templatePoints;\n}\n\nexport function getComputerShots(ship, placedShots, placedAutoShots) {\n    const neighborDiff = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    const shipTemplate = shipTemplatePoints(ship);\n    const autoShots = [];\n\n    for (let i = 0; i < ship.hits.length; i++) {\n        const [hx, hy] = ship.hits[i];\n\n        for (let [xd, yd] of neighborDiff) {\n            const ny = hy + yd;\n            const nx = hx + xd;\n            if (ny > -1 && ny < 10 &&\n                nx > -1 && nx < 10) {\n                if (!alreadyPlaced(nx, ny, autoShots) &&\n                    !alreadyPlaced(nx, ny, placedShots) &&\n                    !alreadyPlaced(nx, ny, shipTemplate) &&\n                    !alreadyPlaced(nx, ny, placedAutoShots)) {\n                    autoShots.push([nx, ny]);\n                }\n            }\n        }\n\n    }\n\n    return autoShots;\n}\n\nconst templates = [\n    [[1]],\n    [[1, 1]],\n    [[1, 1, 1]],\n    [[1, 1, 1, 1]]\n]\n\nfunction TargetsRow({row}) {\n    const [size, ships] = row;\n\n    return (\n        <div className=\"targets__row\">\n            {\n                ships.sort((x,y)=> x.isSunken - y.isSunken)\n                    .reverse()\n                    .map((ship, index) => {\n                    return <Ship ship={templates[size - 1]}\n                                 isSmall={true}\n                                 isSunken={ship.isSunken}\n                                 key={`key-${size}-${index}`}\n                                 setDraggedShip={() => null}/>\n                })\n            }\n        </div>\n    )\n}\n\nexport function Targets({ships, gameState}) {\n    if (ships.length === 0) {\n        return null\n    }\n\n    const TargetShips = groupBy(ships.map(ship => {\n        return {\n            size: hullSize(ship.template),\n            isSunken: ship.isSunken === true\n        }\n    }), \"size\")\n\n    const cn = classNames(\"targets\", {\"targets--faded\": gameState !== \"PLAYING\"})\n\n    return (\n        <div className={cn}>\n            {\n                Object.entries(TargetShips).map((row, index) => <TargetsRow row={row} key={index}/>)\n            }\n        </div>\n    )\n}\n\nexport function EnemyBoard({usePlacedShots, useEnemyShips, title, gameCanStart, isDisabled, onStartClick, gameState, useAutoShots, onMissedShot, showShips}) {\n    const [placedShots, setPlacedShots] = usePlacedShots;\n    const [placedComputerShots, setPlacedComputerShots] = useAutoShots;\n\n    const [enemyShips, setEnemyShips] = useEnemyShips;\n\n    const onCellClick = ({x, y}) => {\n        let newPlaced = [...placedShots];\n        const board = placedShipsToBoard(enemyShips);\n\n        if (board[y][x]) {\n            let newPlaced = enemyShips.filter(sh => sh.uuid !== board[y][x]);\n            let targetShip = enemyShips.filter(s => s.uuid === board[y][x])[0];\n            targetShip = addHit(targetShip, x, y);\n\n            if (isSunken(targetShip)) {\n                targetShip.isSunken = true;\n                setPlacedComputerShots(placedComputerShots.concat(getComputerShots(targetShip, placedShots, placedComputerShots)))\n            }\n            setEnemyShips(newPlaced.concat([targetShip]))\n\n        } else {\n            onMissedShot()\n            setPlacedShots(newPlaced.concat([[x, y]]));\n        }\n    };\n\n    const cn = classNames(\"enemy-board\", {\"enemy-board--disabled\": isDisabled})\n    return (\n        <div className={cn}>\n            <div className=\"enemy-board__row\">\n                <BlankBoard handleCellMouseEnter={() => null}\n                            onCellClick={onCellClick}>\n                    {showShips &&\n                    enemyShips.map(ship => <BoardShip template={ship.template}\n                                                      uuid={ship.uuid}\n                                                      key={ship.uuid}\n                                                      handleMouseDown={() => null}\n                                                      x={ship.x}\n                                                      y={ship.y}/>)\n                    }\n                    <PlacedShots placedShots={placedShots}\n                                 shotSource=\"player\"/>\n                    <PlacedShots placedShots={placedComputerShots}\n                                 shotSource=\"computer\"/>\n                    <BombedShips ships={enemyShips.filter(s => s.hits?.length > 0)}/>\n                </BlankBoard>\n                <Targets\n                    gameState={gameState}\n                    ships={enemyShips}/>\n                {gameState === \"SETUP\" &&\n                <Button isDisabled={!gameCanStart}\n                        onClick={onStartClick}\n                        cn=\"button--start\">\n                    Start pew-pew\n                </Button>\n                }\n\n            </div>\n            <h2 className=\"u-h2\">\n                {title}\n            </h2>\n        </div>\n    );\n}\n","import React, {Fragment, useCallback, useContext, useEffect, useState} from 'react';\nimport {Board} from \"./Board\";\nimport {ShipSelector} from \"./ShipSelector\";\nimport {getDimensions, getRandomInt, hullSize, uuidv4} from \"../core/util\";\nimport {GameSettingsContext} from \"../core/GameSettings\";\nimport {Targets} from \"./EnemyBoard\";\n\nconst centerOffset = (template) => {\n    const {rows, cols} = getDimensions(template);\n\n    return {\n        x: Math.floor((cols - 1) / 2),\n        y: Math.floor((rows - 1) / 2)\n    }\n};\n\nconst inBounds = (x, y, template) => {\n    const {rows, cols} = getDimensions(template);\n\n    if (x < 0 || y < 0) {\n        return false;\n    }\n\n    return rows + y < 11 && cols + x < 11;\n};\n\nconst placeShipOnBoard = (ship, board) => {\n    const {x, y, template, uuid} = ship;\n    const {rows, cols} = getDimensions(template);\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            board[y + i][x + j] = template[i][j] ? uuid : \"\";\n        }\n    }\n\n};\n\nexport const placedShipsToBoard = (placedShips) => {\n    let board = new Array(10).fill().map(() => new Array(10).fill(\"\"));\n\n    for (const ship of placedShips) {\n        placeShipOnBoard(ship, board);\n    }\n    return board;\n};\n\nconst neighborDiff = [[-1, -1], [-1, 0], [-1, 1], [0, 0], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nconst isOverlapping = (x, y, template, placedShips, board = placedShipsToBoard(placedShips)) => {\n    const {rows, cols} = getDimensions(template);\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (template[i][j]) {\n                for (let [xd, yd] of neighborDiff) {\n                    const ny = i + y + yd;\n                    const nx = j + x + xd;\n                    if ((ny > -1 && ny < 10) &&\n                        (nx > -1 && nx < 10) &&\n                        board[ny][nx] !== \"\") {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\nconst calculateOffset = (shipTemplate, x, y) => {\n    if (x === -1 && y === -1) {\n        return centerOffset(shipTemplate)\n    } else {\n        return {x, y}\n    }\n};\n\nconst getAllValidPositions = (board, template) => {\n    const positions = [];\n\n    for (let y = 0; y < 10; y++) {\n        for (let x = 0; x < 10; x++) {\n            if (inBounds(x, y, template) && !isOverlapping(x, y, template, [], board)) {\n                positions.push([x, y]);\n            }\n        }\n    }\n\n    return positions;\n};\n\nexport const getRandomShipPlacement = (shipConfig) => {\n    let board = new Array(10).fill().map(() => new Array(10).fill(\"\"))\n\n    // flattens the ship config array to be consumed by the random placement algorithm\n    const allTemplates = shipConfig.map((arr) => {\n        return [arr.map(f => {\n            return f.t\n        }).flat()]\n    }).flat()\n\n    const chosenTemplates = [];\n    const placedShips = [];\n\n\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4 - i; j++) {\n            const r = getRandomInt(0, allTemplates[i].length - 1);\n            chosenTemplates.push(allTemplates[i][r])\n        }\n    }\n\n    for (let i = 9; i >= 0; i--) {\n        const validPositions = getAllValidPositions(board, chosenTemplates[i]);\n        if (validPositions.length > 0) {\n            const [cx, cy] = validPositions[getRandomInt(0, validPositions.length - 1)];\n            placedShips.push({\n                uuid: uuidv4(),\n                x: cx,\n                y: cy,\n                template: chosenTemplates[i],\n                inBounds: true,\n                isOverlapping: false,\n                isDragging: false,\n                isSnapping: true\n            });\n\n            placeShipOnBoard({\n                x: cx,\n                y: cy,\n                template: chosenTemplates[i]\n            }, board);\n        } else {\n            // in case there are no available places where to put stuff,\n            // just call the function again. I tried this fn ~50k times,\n            // and it was never called again so this is just a precaution\n            getRandomShipPlacement(shipConfig);\n        }\n\n    }\n\n    return placedShips;\n};\n\nconst shipCountsOnBoard = (placedShips) => {\n    let validShipCount = [4, 3, 2, 1];\n    for (let placedShip of placedShips) {\n        validShipCount[hullSize(placedShip.template) - 1]--;\n    }\n    return validShipCount;\n}\n\nexport const isValidShipCount = (ships) => {\n    return shipCountsOnBoard(ships).every(i => i === 0)\n}\n\nexport function SetupBoard({usePlacedShips, title, gameState}) {\n    const [placedShips, setPlacedShips] = usePlacedShips;\n    const [draggedShip, setDraggedShip] = useState(null);\n    const [draggingPosition, setDraggingPosition] = useState({x: 0, y: 0});\n    const [hoveredCell, setHoveredCell] = useState({x: -1, y: -1});\n    const [gameSettings] = useContext(GameSettingsContext)\n\n    const handleCellMouseEnter = useCallback(({x, y}) => {\n        setHoveredCell({x, y});\n    }, [setHoveredCell]);\n\n    const handleDraggedShip = useCallback((shipTemplate, x, y) => {\n        const shipUUID = uuidv4();\n\n        const offset = calculateOffset(shipTemplate, x, y);\n\n        setDraggedShip({\n            template: shipTemplate,\n            uuid: shipUUID,\n            isDragging: true,\n            isSnapping: false,\n            offset: offset,\n            x: -100000,\n            y: -100000\n        })\n    }, [setDraggedShip]);\n\n    const handleDraggedShipSnapping = useCallback(() => {\n\n        const isSnapping = hoveredCell.x > -1 && hoveredCell.y > -1;\n\n        const x = hoveredCell.x - draggedShip.offset.x;\n        const y = hoveredCell.y - draggedShip.offset.y;\n\n        let newDragged = {\n            ...draggedShip,\n            x: x,\n            y: y,\n            inBounds: inBounds(x, y, draggedShip.template),\n            isOverlapping: isOverlapping(x, y, draggedShip.template, placedShips),\n            isDragging: !isSnapping,\n            isSnapping: isSnapping\n        };\n\n        setDraggedShip(newDragged)\n\n    }, [draggedShip, setDraggedShip, hoveredCell, placedShips]);\n\n    const handleOnMouseUp = useCallback((e) => {\n        if (draggedShip?.isSnapping &&\n            draggedShip.inBounds &&\n            !draggedShip.isOverlapping) {\n            let newPlaced = [...placedShips];\n\n            setPlacedShips(newPlaced.concat([{...draggedShip}]));\n\n            setDraggedShip(null);\n            setDraggingPosition({x: -1000, y: -1000})\n        } else {\n            if (draggedShip?.lastValidPosition && draggedShip.inBounds) {\n                let newPlaced = [...placedShips];\n\n                setPlacedShips(newPlaced.concat([{\n                    ...draggedShip,\n                    x: draggedShip.lastValidPosition.x,\n                    y: draggedShip.lastValidPosition.y\n                }]));\n            }\n            setDraggingPosition({x: -1000, y: -1000});\n            setDraggedShip(null);\n        }\n    }, [draggedShip, placedShips, setDraggedShip, setPlacedShips, setDraggingPosition]);\n\n    const handleDraggingOnPlacedShip = useCallback((ship, x, y) => {\n        let newPlaced = placedShips.filter(sh => sh.uuid !== ship.uuid);\n\n        ship.offset = calculateOffset(ship.template, x, y);\n        ship.lastValidPosition = {x: ship.x, y: ship.y};\n\n        setDraggedShip(ship);\n        setPlacedShips(newPlaced);\n    }, [placedShips, setPlacedShips, setDraggedShip]);\n\n    const fillBoardWithRandom = () => {\n        setPlacedShips(getRandomShipPlacement(gameSettings.shipConfig));\n    };\n\n    const resetBoard = () => {\n        setPlacedShips([])\n    };\n\n    // for internal board algorithm testing\n    // eslint-disable-next-line no-unused-vars\n    const tryLots = () => {\n        let results = [];\n        for (let i = 0; i < 10000; i++) {\n            let t1 = performance.now();\n            fillBoardWithRandom()\n            let t2 = performance.now();\n            results.push(t2 - t1);\n        }\n        let sum = results.reduce((previous, current) => current += previous);\n        let avg = sum / results.length;\n        console.log(`avg: ${avg} ms`);\n        console.log(`sum: ${sum} ms`);\n    };\n\n    const handleOnMouseMove = useCallback((e) => {\n        if (draggedShip !== null && (e.buttons === 1 || e.buttons === 3)) {\n            setDraggingPosition({x: e.clientX, y: e.clientY});\n            handleDraggedShipSnapping()\n        }\n    }, [draggedShip, setDraggingPosition, handleDraggedShipSnapping]);\n\n    useEffect(() => {\n        document.addEventListener(\"mousemove\", handleOnMouseMove);\n\n        return () =>\n            document.removeEventListener(\"mousemove\", handleOnMouseMove)\n\n    }, [handleOnMouseMove]);\n\n    const handleOnMouseDown = useCallback((e) => {\n        if (e.buttons === 1 || e.buttons === 3) {\n            setDraggingPosition({x: e.clientX, y: e.clientY})\n        }\n\n    }, [setDraggingPosition]);\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleOnMouseDown, false);\n\n        return () =>\n            document.removeEventListener(\"mousedown\", handleOnMouseDown, false)\n    }, [handleOnMouseDown]);\n\n    useEffect(() => {\n        document.addEventListener(\"mouseup\", handleOnMouseUp, false);\n\n        return () =>\n            document.removeEventListener(\"mouseup\", handleOnMouseUp, false)\n\n    }, [handleOnMouseUp]);\n\n    return (\n        <Fragment>\n            <div className=\"setup-wrapper\">\n                <div className=\"setup-wrapper__row\">\n                    <Board placedShips={placedShips}\n                           handleCellMouseEnter={handleCellMouseEnter}\n                           handlePlacedShipDragging={handleDraggingOnPlacedShip}\n                           draggedShip={draggedShip}\n                           hoveredCell={hoveredCell}\n                           draggingPosition={draggingPosition}/>\n                    <Targets gameState={gameState}\n                             ships={placedShips}/>\n                </div>\n                <h2 className=\"u-h2\">\n                    {title}\n                </h2>\n                <button\n                    className=\"button\"\n                    onClick={fillBoardWithRandom}>\n                    Random layout\n                </button>\n                <button\n                    className=\"button button--desktop\"\n                    onClick={resetBoard}>\n                    Reset layout\n                </button>\n            </div>\n            <ShipSelector\n                allowedCounts={shipCountsOnBoard(placedShips)}\n                draggedShip={draggedShip}\n                setDraggedShip={handleDraggedShip}/>\n        </Fragment>\n    );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport {BlankBoard, BoardShip} from \"./Board\";\nimport {PlacedShots, BombedShips, Targets} from \"./EnemyBoard\"\n\n\nexport function PlayerBoard({useTakenShots, useTakenAutoShots, usePlacedShips, title, isDisabled, gameState}) {\n    const [takenShots] = useTakenShots;\n    const [takenAutoShots] = useTakenAutoShots;\n\n    const [enemyShips] = usePlacedShips;\n\n    const cn = classNames(\"player-board\", {\"player-board--disabled\": isDisabled})\n    return (\n        <div className={cn}>\n            <div className=\"player-board__row\">\n                <BlankBoard handleCellMouseEnter={() => null}\n                            onCellClick={() => null}>\n                    <PlacedShots placedShots={takenShots}\n                                 shotSource=\"player\"/>\n                    <PlacedShots placedShots={takenAutoShots}\n                                 shotSource=\"computer\"/>\n                    {\n                        enemyShips.map(ship => <BoardShip template={ship.template}\n                                                          uuid={ship.uuid}\n                                                          key={ship.uuid}\n                                                          handleMouseDown={() => null}\n                                                          x={ship.x}\n                                                          y={ship.y}/>)\n                    }\n\n                    <BombedShips ships={enemyShips.filter(s => s.hits?.length > 0)}/>\n                </BlankBoard>\n                <Targets\n                    gameState={gameState}\n                    ships={enemyShips}/>\n            </div>\n            <h2 className=\"u-h2\">\n                {title}\n            </h2>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default  function ButtonGroup({children}) {\n    return  (\n        <div className=\"button-group\">\n            {children}\n        </div>\n    )\n}\n","import React, {useContext} from \"react\";\nimport Button from \"../core/Button\";\nimport ButtonGroup from \"../core/ButtonGroup\";\nimport {GAME_MODES, GameSettingsContext} from \"../core/GameSettings\";\n\nexport default function Header({gameState}) {\n    const [gameSettings, setGameSettings] = useContext(GameSettingsContext);\n\n    return (\n        <header className=\"header\">\n            <div className=\"header__content\">\n                <h1 className=\"header__logo\">\n                    <span role=\"img\" aria-label=\"logo\">🚢</span> × <span role=\"img\" aria-label=\"logo\">💣</span>\n                </h1>\n                <ButtonGroup>\n                    <Button outlined={true}\n                            isDisabled={gameState === \"PLAYING\"}\n                            onClick={() => setGameSettings(GAME_MODES.simple)}\n                            isActive={gameSettings.name === \"simple\"}>\n                        Simple (<span role=\"img\" aria-label=\"flag\">🇺🇸</span>)\n                    </Button>\n                    <Button outlined={true}\n                            isDisabled={gameState === \"PLAYING\"}\n                            onClick={() => setGameSettings(GAME_MODES.advanced)}\n                            isActive={gameSettings.name === \"advanced\"}>\n                        Advanced (<span role=\"img\" aria-label=\"flag\">🇱🇻</span>)\n                    </Button>\n                </ButtonGroup>\n            </div>\n        </header>\n    )\n}\n","import Button from \"../core/Button\";\nimport React from \"react\";\n\nexport default function GameFinished({computerShips, isPlayerTurn, restartGame}) {\n    if (isPlayerTurn &&\n        computerShips.every(s => s.isSunken)) {\n        return (\n            <div className=\"game-finished\">\n                <h2 className=\"u-h2\">\n                    Congrats, you beat the computer!\n                    <span role=\"img\" aria-label=\"confetti\">🎉</span>\n                </h2>\n                <Button onClick={restartGame}>\n                    Dominate again!\n                </Button>\n            </div>\n\n        )\n    } else {\n        return (\n            <div className=\"game-finished\">\n                <h2 className=\"u-h2\">\n                    Tough luck, the Computer was superior!\n                </h2>\n                <Button onClick={restartGame}>\n                    Let me rematch!\n                </Button>\n            </div>\n\n        )\n    }\n\n}\n","import React, {useEffect, useRef} from \"react\";\n\n\nconst useDidUpdateEffect = (func, deps) => {\n    const didMount = useRef(false);\n\n    useEffect(() => {\n        if (didMount.current) func();\n        else didMount.current = true;\n    }, deps);\n}\n\nexport default useDidUpdateEffect;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {getRandomShipPlacement, isValidShipCount, placedShipsToBoard, SetupBoard} from \"./components/SetupBoard\";\nimport './App.scss';\nimport {addHit, alreadyPlaced, EnemyBoard, getComputerShots, isSunken} from \"./components/EnemyBoard\";\nimport {PlayerBoard} from \"./components/PlayerBoard\";\nimport {getRandomBool, getRandomInt} from \"./core/util\"\nimport Header from \"./components/Header\";\nimport {GAME_MODES, GameSettingsContext} from \"./core/GameSettings\";\nimport GameFinished from \"./components/GameFinished\";\nimport useDidUpdateEffect from \"./core/useDidUpdateEffect\";\n\nconst placeShot = ({x, y}, placedShots, setPlacedShots, placedComputerShots, setPlacedComputerShots, enemyShips, setEnemyShips, onMissedShot) => {\n    let newPlaced = [...placedShots];\n    const board = placedShipsToBoard(enemyShips);\n\n    if (board[y][x]) {\n        let newPlaced = enemyShips.filter(sh => sh.uuid !== board[y][x]);\n        let targetShip = enemyShips.filter(s => s.uuid === board[y][x])[0];\n        targetShip = addHit(targetShip, x, y);\n\n        if (isSunken(targetShip)) {\n            targetShip.isSunken = true;\n            setPlacedComputerShots(placedComputerShots.concat(getComputerShots(targetShip, placedShots, placedComputerShots)))\n        }\n        setEnemyShips(newPlaced.concat([targetShip]))\n\n    } else {\n        onMissedShot()\n        setPlacedShots(newPlaced.concat([[x, y]]));\n    }\n};\n\nconst getRandomArrayItem = (arr) => {\n    return arr[getRandomInt(0, arr.length - 1)]\n}\n\nconst getRandomValidTarget = (ships, shots, autoShots, isOddTargetsFirst) => {\n    const shipShots = ships.map(ship => ship.hits)\n        .filter(hit => hit !== undefined)\n        .flat()\n\n    const allShotsOnBoard = shipShots.concat(shots, autoShots);\n\n    let oddXPositions = [];\n    let evenXPositions = [];\n\n    for (let y = 0; y < 10; y++) {\n        for (let x = 0; x < 10; x++) {\n            if (y % 2 !== x % 2) {\n                evenXPositions.push([x, y])\n            } else {\n                oddXPositions.push([x, y]);\n            }\n        }\n    }\n\n    const oddOptions = oddXPositions\n        .filter(([x, y]) => !alreadyPlaced(x, y, allShotsOnBoard))\n\n    const evenOptions = evenXPositions\n        .filter(([x, y]) => !alreadyPlaced(x, y, allShotsOnBoard))\n\n    if (isOddTargetsFirst) {\n        if (oddOptions.length > 0) {\n            return getRandomArrayItem(oddOptions)\n        } else {\n            return getRandomArrayItem(evenOptions)\n        }\n    } else {\n        if (evenOptions.length > 0) {\n            return getRandomArrayItem(evenOptions)\n        } else {\n            return getRandomArrayItem(oddOptions)\n        }\n    }\n};\n\nconst getDiffArray = (mode, hits, shots) => {\n    if (mode === \"advanced\" || hits.length === 1) {\n        return [[0, -1], [1, 0], [0, 1], [-1, 0]]\n    } else {\n        const direction = hits[0][0] === hits[1][0] ? \"vertical\" : \"horizontal\";\n\n        if (direction === \"horizontal\") {\n            return [[1, 0], [-1, 0]];\n        } else {\n            return [[0, 1], [0, -1]];\n        }\n    }\n}\n\nconst chooseTarget = (modeName, {hits}, shots, autoShots) => {\n    const shotsCombined = shots.concat(autoShots);\n    let pHits = [];\n\n    const diffs = getDiffArray(modeName, hits, shotsCombined);\n\n    for (let [hx, hy] of hits) {\n        for (let [xd, yd] of diffs) {\n            const ny = hy + yd;\n            const nx = hx + xd;\n            if ((ny > -1 && ny < 10) &&\n                (nx > -1 && nx < 10) &&\n                !alreadyPlaced(nx, ny, shotsCombined) &&\n                !alreadyPlaced(nx, ny, hits)) {\n                pHits.push([nx, ny])\n            }\n        }\n    }\n    return pHits[getRandomInt(0, pHits.length - 1)]\n}\n\n\nfunction App() {\n    const [gameState, setGameState] = useState(\"SETUP\");\n    const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n\n    const [gameSettings, setGameSettings] = useState(GAME_MODES.advanced);\n\n    const [playerPlacedShips, setPlayerPlacedShips] = useState(getRandomShipPlacement(gameSettings.shipConfig));\n    const [playerPlacedShots, setPlayerPlacedShots] = useState([])\n    const [playerPlacedAutoShots, setPlayerPlacedAutoShots] = useState([])\n\n    const [computerPlacedShips, setComputerPlacedShips] = useState(getRandomShipPlacement(gameSettings.shipConfig));\n    const [computerPlacedShots, setComputerPlacedShots] = useState([])\n    const [computerPlacedAutoShots, setComputerPlacedAutoShots] = useState([])\n\n    const [isOddTargetsFirst, setIsOddTargetsFirst] = useState(getRandomBool())\n\n    const resetGame = useCallback(() => {\n        setPlayerPlacedShips(getRandomShipPlacement(gameSettings.shipConfig))\n        setComputerPlacedShips(getRandomShipPlacement(gameSettings.shipConfig))\n        setPlayerPlacedShots([])\n        setPlayerPlacedAutoShots([])\n        setComputerPlacedShots([])\n        setComputerPlacedAutoShots([])\n        setGameState(\"SETUP\")\n        setIsOddTargetsFirst(getRandomBool())\n    }, [gameSettings, setPlayerPlacedShips, setComputerPlacedShips, setPlayerPlacedShots, setPlayerPlacedAutoShots, setComputerPlacedShots, setComputerPlacedAutoShots, setGameState, getRandomBool])\n\n    useEffect(() => {\n        let timer = null;\n        // computer's turn to make a move\n        if (gameState === \"PLAYING\" && !isPlayerTurn) {\n            timer = setTimeout(() => {\n                let woundedShip = playerPlacedShips.filter(ship => ship.hits?.length > 0 && !ship.isSunken)\n\n                if (woundedShip[0]) {\n                    const [x, y] = chooseTarget(gameSettings.name, woundedShip[0], computerPlacedShots, computerPlacedAutoShots)\n                    placeShot({x, y},\n                        computerPlacedShots, setComputerPlacedShots,\n                        computerPlacedAutoShots, setComputerPlacedAutoShots,\n                        playerPlacedShips, setPlayerPlacedShips,\n                        () => setIsPlayerTurn(true))\n                } else {\n                    const [x, y] = getRandomValidTarget(playerPlacedShips, computerPlacedShots, computerPlacedAutoShots, isOddTargetsFirst);\n                    placeShot({x, y},\n                        computerPlacedShots, setComputerPlacedShots,\n                        computerPlacedAutoShots, setComputerPlacedAutoShots,\n                        playerPlacedShips, setPlayerPlacedShips,\n                        () => setIsPlayerTurn(true))\n                }\n            }, 400)\n\n        }\n        return () => clearTimeout(timer)\n    }, [gameState, gameSettings.name, isPlayerTurn,\n        computerPlacedShots, setComputerPlacedShots,\n        computerPlacedAutoShots, setComputerPlacedAutoShots,\n        playerPlacedShips, setPlayerPlacedShips,\n        setIsPlayerTurn])\n\n    useEffect(() => {\n        if ((computerPlacedShips.every(ship => ship.isSunken) && computerPlacedShips.length > 0) ||\n            (playerPlacedShips.every(ship => ship.isSunken) && playerPlacedShips.length > 0)) {\n            setGameState(\"FINISHED\")\n        }\n    }, [playerPlacedShips, computerPlacedShips, setGameState])\n\n    useDidUpdateEffect(() => {\n        setPlayerPlacedShips(getRandomShipPlacement(gameSettings.shipConfig))\n        setComputerPlacedShips(getRandomShipPlacement(gameSettings.shipConfig))\n        setPlayerPlacedShots([])\n        setPlayerPlacedAutoShots([])\n        setComputerPlacedShots([])\n        setComputerPlacedAutoShots([])\n        setGameState(\"SETUP\")\n        setIsOddTargetsFirst(getRandomBool())\n    }, [gameSettings.name, setPlayerPlacedShips, setComputerPlacedShips, setPlayerPlacedShots, setPlayerPlacedAutoShots, setComputerPlacedShots, setComputerPlacedAutoShots, setGameState, setIsOddTargetsFirst])\n\n    return (\n        <GameSettingsContext.Provider value={[gameSettings, setGameSettings]}>\n            <div className=\"App\">\n                <Header gameState={gameState}/>\n                {gameState === \"FINISHED\" &&\n                <GameFinished computerShips={computerPlacedShips}\n                              isPlayerTurn={isPlayerTurn}\n                              restartGame={resetGame}/>\n                }\n                <div className=\"App__row\">\n                    {gameState === \"SETUP\" &&\n                    <SetupBoard\n                        title=\"Your‍ board\"\n                        usePlacedShips={[playerPlacedShips, setPlayerPlacedShips]}/>\n                    }\n                    {gameState !== \"SETUP\" &&\n                    <PlayerBoard\n                        title=\"Your‍ board\"\n                        gameState={gameState}\n                        isDisabled={gameState !== \"PLAYING\"}\n                        usePlacedShips={[playerPlacedShips, setPlayerPlacedShips]}\n                        useTakenShots={[computerPlacedShots, setComputerPlacedShots]}\n                        useTakenAutoShots={[computerPlacedAutoShots, computerPlacedAutoShots]}\n                    />\n                    }\n                    <EnemyBoard\n                        title=\"Computer's board\"\n                        gameCanStart={isValidShipCount(playerPlacedShips)}\n                        onMissedShot={() => setIsPlayerTurn(false)}\n                        gameState={gameState}\n                        onStartClick={() => setGameState(\"PLAYING\")}\n                        showShips={gameState === \"FINISHED\"}\n                        isDisabled={gameState !== \"PLAYING\" || !isPlayerTurn}\n                        useEnemyShips={[computerPlacedShips, setComputerPlacedShips]}\n                        usePlacedShots={[playerPlacedShots, setPlayerPlacedShots]}\n                        useAutoShots={[playerPlacedAutoShots, setPlayerPlacedAutoShots]}\n                    />\n                </div>\n                {/*<div className={\"App__row\"}>*/}\n                {/*    {gameState === \"SETUP\" &&*/}\n                {/*    <SetupBoard*/}\n                {/*        title=\"Computer's board\"*/}\n                {/*        usePlacedShips={[computerPlacedShips, setComputerPlacedShips]}/>*/}\n                {/*    }*/}\n                {/*    {gameState === \"PLAYING\" &&*/}\n                {/*    <PlayerBoard*/}\n                {/*        title=\"Computer's board\"*/}\n                {/*        isDisabled={gameState !== \"PLAYING\"}*/}\n                {/*        usePlacedShips={[computerPlacedShips]}*/}\n                {/*        useTakenShots={[playerPlacedShots]}*/}\n                {/*        useTakenAutoShots={[playerPlacedAutoShots]}*/}\n                {/*    />*/}\n                {/*    }*/}\n                {/*    <EnemyBoard*/}\n                {/*        title=\"Player's board\"*/}\n                {/*        gameCanStart={isValidShipCount(playerPlacedShips)}*/}\n                {/*        onMissedShot={() => setIsPlayerTurn(true)}*/}\n                {/*        gameState={gameState}*/}\n                {/*        onStartClick={() => setGameState(\"PLAYING\")}*/}\n                {/*        isDisabled={gameState !== \"PLAYING\" || isPlayerTurn}*/}\n                {/*        useEnemyShips={[playerPlacedShips, setPlayerPlacedShips]}*/}\n                {/*        usePlacedShots={[computerPlacedShots, setComputerPlacedShots]}*/}\n                {/*        useAutoShots={[computerPlacedAutoShots, setComputerPlacedAutoShots]}/>*/}\n                {/*</div>*/}\n            </div>\n        </GameSettingsContext.Provider>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}